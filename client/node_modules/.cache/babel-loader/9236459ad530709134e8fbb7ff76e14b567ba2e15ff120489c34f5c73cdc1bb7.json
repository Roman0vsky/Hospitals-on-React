{"ast":null,"code":"import { addItem } from \"src/utils/local-storage\";\nimport client from \"../client\";\nimport { API_ENDPOINTS } from \"src/utils/constants\";\nconst AuthService = {\n  login: async body => {\n    try {\n      const response = await client.post(API_ENDPOINTS.LOGIN, body);\n      const data = await response.json();\n      if (typeof data === \"string\") throw new Error(data);\n      if (data.accessToken) addItem(\"token\", data.accessToken);\n      return data.user;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  },\n  register: async body => {\n    try {\n      const response = await client.post(API_ENDPOINTS.REGISTER, body);\n      const data = await response.json();\n      if (typeof data === \"string\") throw new Error(data);\n      if (data.accessToken) addItem(\"token\", data.accessToken);\n      return data.user;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["addItem","client","API_ENDPOINTS","AuthService","login","body","response","post","LOGIN","data","json","Error","accessToken","user","err","message","register","REGISTER"],"sources":["D:/Programs/VS Code projects/Веб-прога/project_marina/client/src/utils/api/services/Auth.ts"],"sourcesContent":["import { addItem } from \"src/utils/local-storage\";\r\nimport client from \"../client\";\r\nimport { API_ENDPOINTS } from \"src/utils/constants\";\r\nimport { IBackAuth } from \"src/utils/interfaces/back-auth.interface\";\r\nimport { IUser } from \"src/utils/interfaces/user.interface\";\r\n\r\nconst AuthService = {\r\n  login: async (body: { email: string; password: string }): Promise<IUser> => {\r\n    try {\r\n      const response = await client.post(API_ENDPOINTS.LOGIN, body);\r\n      const data: IBackAuth | string = await response.json();\r\n\r\n      if (typeof data === \"string\") throw new Error(data);\r\n\r\n      if (data.accessToken) addItem(\"token\", data.accessToken);\r\n\r\n      return data.user;\r\n    } catch (err: any) {\r\n      throw new Error(err.message);\r\n    }\r\n  },\r\n  register: async (body: {\r\n    email: string;\r\n    password: string;\r\n    login: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    roles: string[];\r\n  }): Promise<IUser> => {\r\n    try {\r\n      const response = await client.post(API_ENDPOINTS.REGISTER, body);\r\n      const data: IBackAuth | string = await response.json();\r\n\r\n      if (typeof data === \"string\") throw new Error(data);\r\n\r\n      if (data.accessToken) addItem(\"token\", data.accessToken);\r\n\r\n      return data.user;\r\n    } catch (err: any) {\r\n      throw new Error(err.message);\r\n    }\r\n  },\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAyB;AACjD,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,aAAa,QAAQ,qBAAqB;AAInD,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAOC,IAAyC,IAAqB;IAC1E,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,MAAM,CAACM,IAAI,CAACL,aAAa,CAACM,KAAK,EAAEH,IAAI,CAAC;MAC7D,MAAMI,IAAwB,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAEtD,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAACF,IAAI,CAAC;MAEnD,IAAIA,IAAI,CAACG,WAAW,EAAEZ,OAAO,CAAC,OAAO,EAAES,IAAI,CAACG,WAAW,CAAC;MAExD,OAAOH,IAAI,CAACI,IAAI;IAClB,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjB,MAAM,IAAIH,KAAK,CAACG,GAAG,CAACC,OAAO,CAAC;IAC9B;EACF,CAAC;EACDC,QAAQ,EAAE,MAAOX,IAOhB,IAAqB;IACpB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,MAAM,CAACM,IAAI,CAACL,aAAa,CAACe,QAAQ,EAAEZ,IAAI,CAAC;MAChE,MAAMI,IAAwB,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAEtD,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAACF,IAAI,CAAC;MAEnD,IAAIA,IAAI,CAACG,WAAW,EAAEZ,OAAO,CAAC,OAAO,EAAES,IAAI,CAACG,WAAW,CAAC;MAExD,OAAOH,IAAI,CAACI,IAAI;IAClB,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjB,MAAM,IAAIH,KAAK,CAACG,GAAG,CAACC,OAAO,CAAC;IAC9B;EACF;AACF,CAAC;AAED,eAAeZ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}