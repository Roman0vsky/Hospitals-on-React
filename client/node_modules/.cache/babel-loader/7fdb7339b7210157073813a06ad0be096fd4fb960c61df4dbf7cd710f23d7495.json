{"ast":null,"code":"import client from \"../client\";\nimport { API_ENDPOINTS } from \"src/utils/constants\";\nconst CompaniesService = {\n  getCompanies: async _ref => {\n    let {\n      hospitalId\n    } = _ref;\n    try {\n      const response = await client.get(`${API_ENDPOINTS.COMPANIES}?${hospitalId ? `hospitalId=${hospitalId}` : \"\"}`);\n      const data = await response.json();\n      if (typeof data === \"string\") throw new Error(data);\n      return data;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  },\n  getCompany: async _ref2 => {\n    let {\n      id\n    } = _ref2;\n    try {\n      const response = await client.get(`${API_ENDPOINTS.COMPANIES}/${id}`);\n      const data = await response.json();\n      if (typeof data === \"string\") throw new Error(data);\n      return data;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n};\nexport default CompaniesService;","map":{"version":3,"names":["client","API_ENDPOINTS","CompaniesService","getCompanies","_ref","hospitalId","response","get","COMPANIES","data","json","Error","err","message","getCompany","_ref2","id"],"sources":["D:/Programs/VS Code projects/Веб-прога/hospitals-on-react/client/src/utils/api/services/Companies.ts"],"sourcesContent":["import { addItem } from \"src/utils/local-storage\";\r\nimport client from \"../client\";\r\nimport { API_ENDPOINTS } from \"src/utils/constants\";\r\nimport { IBackAuth } from \"src/utils/interfaces/back-auth.interface\";\r\nimport { IUser } from \"src/utils/interfaces/user.interface\";\r\nimport { IHospital } from \"src/utils/interfaces/catalog.interface\";\r\nimport { IDoctor } from \"src/utils/interfaces/company.interface\";\r\n\r\ninterface IGetCompanies {\r\n  hospitalId?: number;\r\n}\r\ninterface IGetCompany extends IGetCompanies {\r\n  id: number;\r\n}\r\n\r\nconst CompaniesService = {\r\n  getCompanies: async ({ hospitalId }: IGetCompanies): Promise<IDoctor[]> => {\r\n    try {\r\n      const response = await client.get(\r\n        `${API_ENDPOINTS.COMPANIES}?${\r\n          hospitalId ? `hospitalId=${hospitalId}` : \"\"\r\n        }`\r\n      );\r\n      const data: IDoctor[] | string = await response.json();\r\n\r\n      if (typeof data === \"string\") throw new Error(data);\r\n\r\n      return data;\r\n    } catch (err: any) {\r\n      throw new Error(err.message);\r\n    }\r\n  },\r\n  getCompany: async ({ id }: IGetCompany): Promise<IDoctor> => {\r\n    try {\r\n      const response = await client.get(`${API_ENDPOINTS.COMPANIES}/${id}`);\r\n      const data: IDoctor | string = await response.json();\r\n\r\n      if (typeof data === \"string\") throw new Error(data);\r\n\r\n      return data;\r\n    } catch (err: any) {\r\n      throw new Error(err.message);\r\n    }\r\n  },\r\n};\r\n\r\nexport default CompaniesService;\r\n"],"mappings":"AACA,OAAOA,MAAM,MAAM,WAAW;AAC9B,SAASC,aAAa,QAAQ,qBAAqB;AAanD,MAAMC,gBAAgB,GAAG;EACvBC,YAAY,EAAE,MAAAC,IAAA,IAA6D;IAAA,IAAtD;MAAEC;IAA0B,CAAC,GAAAD,IAAA;IAChD,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMN,MAAM,CAACO,GAAG,CAC9B,GAAEN,aAAa,CAACO,SAAU,IACzBH,UAAU,GAAI,cAAaA,UAAW,EAAC,GAAG,EAC3C,EACH,CAAC;MACD,MAAMI,IAAwB,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAEtD,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAACF,IAAI,CAAC;MAEnD,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOG,GAAQ,EAAE;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B;EACF,CAAC;EACDC,UAAU,EAAE,MAAAC,KAAA,IAAiD;IAAA,IAA1C;MAAEC;IAAgB,CAAC,GAAAD,KAAA;IACpC,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMN,MAAM,CAACO,GAAG,CAAE,GAAEN,aAAa,CAACO,SAAU,IAAGQ,EAAG,EAAC,CAAC;MACrE,MAAMP,IAAsB,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAEpD,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAACF,IAAI,CAAC;MAEnD,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOG,GAAQ,EAAE;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B;EACF;AACF,CAAC;AAED,eAAeX,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}